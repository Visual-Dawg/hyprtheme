use std::{path::{PathBuf, Path}, fs, borrow::Borrow};

use expanduser;
use crate::{theme::Theme, config};

use std::process::Command;

pub fn ensure_config(){
    let hypr_config = expanduser::expanduser("~/.config/hypr/hyprland.conf").unwrap();

    let conf = fs::read_to_string(&hypr_config).expect("Unable to read hyprland config file");

    let dist_path = expanduser::expanduser("~/.config/hypr/themes/__dist/__dist.conf").unwrap();

    if !dist_path.exists(){
        println!("Creating {}",dist_path.display());
        fs::create_dir_all(dist_path.parent().unwrap()).expect("Unable to create directory");
        fs::write(dist_path, "").expect("Unable to write to file");
    }

    let autogen = format!("
#====== autogenerated by hyprtheme ======#
source = ~/.config/hypr/themes/__dist/__dist.conf
");

    if !conf.contains(&autogen){
        println!("Adding autogen to {}",hypr_config.display());
        fs::write(hypr_config, conf + autogen.as_str()).expect("Unable to write to file");
    }


}

pub fn apply(mut theme:Theme){
    ensure_config();
    let subtheme = &theme.default_subtheme;
    if !subtheme.trim().is_empty(){
        let nest = subtheme.split(":").into_iter().collect::<Vec<&str>>();

        let mut subtheme = theme.subthemes.iter().find(|t| t.name == nest[0]).unwrap();

        for n in nest.iter().skip(1){
            subtheme = subtheme.subthemes.iter().find(|t| t.name == *n).unwrap();
        }

        theme = subtheme.clone();
    }

    let config_file= theme.conf;

    let dist_path = expanduser::expanduser("~/.config/hypr/themes/__dist/").unwrap();

    fs::create_dir_all(&dist_path).expect("Unable to create directory");

    Command::new("rsync")
        .arg("-r")
        .arg(String::from(config_file.parent().unwrap().to_str().unwrap()) + "/")
        .arg(&dist_path)
        .output()
        .expect("Unable to copy files");
    
    let dist = dist_path.join(config_file.file_name().unwrap());

    Command::new("mv")
        .arg(&dist)
        .arg(&dist.parent().unwrap().join("__dist.conf"))
        .output()
        .expect("Unable to move file");
}
