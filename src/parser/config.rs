use crate::{parser::theme::Theme, util::get_subtheme};
use std::fs;

use regex::Regex;

#[derive(Debug, Clone)]
pub struct Config {
    pub raw: String,
    pub theme: Theme,
}

impl Config {
    pub fn from_theme(mut theme: Theme) -> Config {
        if let Some(subtheme) = get_subtheme(&theme) {
            theme = subtheme
        }

        Config {
            raw: {
                let re = Regex::new(r"\$THEME_DIR\s*=").unwrap();
                format!(
                    "#====== generated by hyprtheme ======#\n$THEME_DIR={}\n\n{}",
                    theme.config_path.parent().unwrap().to_str().unwrap(),
                    re.replace_all(
                        fs::read_to_string(&theme.config_path)
                            .expect("Unable to read from theme config file")
                            .as_str(),
                            "$__THEME_DIR"
                    )
                )
            },
            theme,
        }
    }

    pub fn build_conf(&self) -> String {
        self.raw.to_owned()
    }
}
